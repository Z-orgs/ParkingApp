<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/assets/css/base.css">
    <link rel="stylesheet" href="/assets/css/all.min.css">
    <link rel="stylesheet" href="/assets/css/style.css">
    <link rel="stylesheet" href="/assets/css/update.css">
</head>

<body>
    <h2 class="tab-title">UPDATE</h2>
    <form action="/update-vehicle" method="post" id="update-vehicle">
        <input type="text" name="idV" hidden value="<%= dataVehicle.idV %>">
        <div style="width: 100%; background: #fff;" class="custom-select">
            <select name="type">
                <% if(dataVehicle.type==="type1" ) { %>
                    <option value="type0">Choose vehicle type</option>
                    <option value="type1" selected>Bicycle/ Electric bicycle</option>
                    <option value="type2">Motorcycle</option>
                    <option value="type3">Car</option>
                    <% } else if(dataVehicle.type==="type2" ){ %>
                        <option value="type0">Choose vehicle type</option>
                        <option value="type1">Bicycle/ Electric bicycle</option>
                        <option value="type2" selected>Motorcycle</option>
                        <option value="type3">Car</option>
                        <% } else if(dataVehicle.type==="type3" ) { %>
                            <option value="type0">Choose vehicle type</option>
                            <option value="type1">Bicycle/ Electric bicycle</option>
                            <option value="type2">Motorcycle</option>
                            <option value="type3" selected>Car</option>
                            <% } else if(dataVehicle.type==="type0" ) { %>
                                <option value="type0" selected>Choose vehicle type</option>
                                <option value="type1">Bicycle/ Electric bicycle</option>
                                <option value="type2">Motorcycle</option>
                                <option value="type3">Car</option>
                                <% } %>
            </select>
        </div>
        <div class="mb-3">
            <label for="license" class="form-label">License plate</label>
            <div class="form-group">
                <input type="text" class="form-control" name="license" value="<%= dataVehicle.license %>" rules="required">
                <span class="error-msg"></span>
            </div>
        </div>
        <div class=" mb-3">
            <label for="id" class="form-label">Owner by ID</label>
            <div class="form-group">
                <input type="text" class="form-control" name="id" value="<%= dataVehicle.id %>" rules="required|isNumber">
                <span class="error-msg"></span>
            </div>
        </div>
        <div class="center-line">
            <button class="button noselect btn-inverser-effect" type="reset">
                <span class="text">Reset</span>
                <span class="icon">
                    <i class="fa-solid fa-arrow-rotate-left"></i>
                </span>
            </button>
            <button class="button noselect" type="submit">
                <span class="text">Save</span>
                <span class="icon">
                    <i class="fa-solid fa-check"></i>
                </span>
            </button>
        </div>
    </form>
    <script>
        var x, i, j, l, ll, selElmnt, a, b, c;
        /*look for any elements with the class "custom-select":*/
        x = document.getElementsByClassName("custom-select");
        l = x.length;
        for (i = 0; i < l; i++) {
            selElmnt = x[i].getElementsByTagName("select")[0];
            ll = selElmnt.length;
            /*for each element, create a new DIV that will act as the selected item:*/
            a = document.createElement("DIV");
            a.setAttribute("class", "select-selected");
            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
            x[i].appendChild(a);
            /*for each element, create a new DIV that will contain the option list:*/
            b = document.createElement("DIV");
            b.setAttribute("class", "select-items select-hide");
            for (j = 1; j < ll; j++) {
                /*for each option in the original select element,
                create a new DIV that will act as an option item:*/
                c = document.createElement("DIV");
                c.innerHTML = selElmnt.options[j].innerHTML;
                c.addEventListener("click", function (e) {
                    /*when an item is clicked, update the original select box,
                    and the selected item:*/
                    var y, i, k, s, h, sl, yl;
                    s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                    sl = s.length;
                    h = this.parentNode.previousSibling;
                    for (i = 0; i < sl; i++) {
                        if (s.options[i].innerHTML == this.innerHTML) {
                            s.selectedIndex = i;
                            h.innerHTML = this.innerHTML;
                            y = this.parentNode.getElementsByClassName("same-as-selected");
                            yl = y.length;
                            for (k = 0; k < yl; k++) {
                                y[k].removeAttribute("class");
                            }
                            this.setAttribute("class", "same-as-selected");
                            break;
                        }
                    }
                    h.click();
                });
                b.appendChild(c);
            }
            x[i].appendChild(b);
            a.addEventListener("click", function (e) {
                /*when the select box is clicked, close any other select boxes,
                and open/close the current select box:*/
                e.stopPropagation();
                closeAllSelect(this);
                this.nextSibling.classList.toggle("select-hide");
                this.classList.toggle("select-arrow-active");
            });
        }
        function closeAllSelect(elmnt) {
            /*a function that will close all select boxes in the document,
            except the current select box:*/
            var x, y, i, xl, yl, arrNo = [];
            x = document.getElementsByClassName("select-items");
            y = document.getElementsByClassName("select-selected");
            xl = x.length;
            yl = y.length;
            for (i = 0; i < yl; i++) {
                if (elmnt == y[i]) {
                    arrNo.push(i);
                } else {
                    y[i].classList.remove("select-arrow-active");
                }
            }
            for (i = 0; i < xl; i++) {
                if (arrNo.indexOf(i)) {
                    x[i].classList.add("select-hide");
                }
            }
        }
        /*if the user clicks anywhere outside the select box,
        then close all select boxes:*/
        document.addEventListener("click", closeAllSelect);
        function Validator(formSelector) {
            function getParent(element, selector) {
                while(element.parentElement) {
                    if(element.parentElement.matches(selector)) {
                        return element.parentElement;
                    }
                    element = element.parentElement;
                }
            }
            var formElement = document.querySelector(formSelector);
            var formRules = {};
        
            var validatorRules = {
                required: function (value) {
                    return value ? undefined : `Can't be left blank!`;
                },
                user_name: function (value) {
                    const userNameRegex = /^[a-zA-Z0-9\_]+$/;
                    return userNameRegex.test(value) ? undefined : `Please re-enter your user name!`
                },
                min: function (min) {
                    return function (value) {
                        return value.length >= min ? undefined : `Password min ${min} characters!`
                    }
                },
                max: function (max) {
                    return function (value) {
                        return value.length <= max ? undefined : `Password max ${max} characters!`
                    }
                },
                comfirm: function (value) {
                    return value == document.querySelector('#password').value ? undefined : `Invalid confirmation password!`
                },
                isFullName: function(value) {
                    const regexName = /^[a-zA-Z ]{2,}$/g;
                    return regexName.test(removeAscent(value)) ? undefined : `Full name invalid!`
                },
                isPhoneNumber: function(value) {
                    const regexPhoneNumber = /^(0?)(3[2-9]|5[6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])[0-9]{7}$/
                    return regexPhoneNumber.test(value) ? undefined : `Phone number invalid!`
                },
                isNumber: function(value) {
                    const regex = /^[0-9]+$/
                    return regex.test(value) ? undefined : `Value must be numeric!`
                }
            };
            
            // Nếu tồn tại formElement
            if (formElement) {
                var inputs = formElement.querySelectorAll('[name][rules]');
                for (var input of inputs) {
                    var rules = input.getAttribute('rules').split('|');
                    for (var rule of rules) {
                        rule.split(':');
                        var ruleInfo;
                        var isRuleHasValue = rule.includes(':');
        
                        if(isRuleHasValue) {
                            ruleInfo = rule.split(':');
                            rule = ruleInfo[0];
                        }
                        var ruleFn = validatorRules[rule];
                        if (isRuleHasValue) {
                            ruleFn = ruleFn(ruleInfo[1]);
                        }
                        if(Array.isArray(formRules[input.name])) {
                            formRules[input.name].push(ruleFn);
                        } else {
                            formRules[input.name] = [ruleFn];
                        }
                    }
        
                    //Xử lí khi blur, click...
                    input.onblur = handleValidate;
        
                    input.oninput = handleClearError;
                }
        
                
                function handleValidate(e) {
                    rules = formRules[e.target.name];
                    var errorMsg;
                    for (var rule of rules) {
                        errorMsg = rule(e.target.value);
                        if (errorMsg) break;
                    }
        
                    //Hiện thị lỗi ra UI
                    if (errorMsg) {
                        var formGroup = getParent(e.target, '.form-group');
                        if (formGroup) {
                            formGroup.classList.add('invalid');
                            var formError = formGroup.querySelector('.error-msg')
                            if (formError) {
                                formError.innerHTML = errorMsg;
                            }
        
                        }
                    }
                    return !errorMsg;
                }
        
                function handleClearError(e) {
                    var formGroup = getParent(e.target, '.form-group');
                    if (formGroup.classList.contains('invalid')) {
                        formGroup.classList.remove('invalid');
                        var formError = formGroup.querySelector('.error-msg')
                            if (formError) {
                                formError.innerHTML = '';
                            }
                    }
                }

                function removeAscent (str) {
                    if (str === null || str === undefined) return str;
                    str = str.toLowerCase();
                    str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
                    str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
                    str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
                    str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
                    str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
                    str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
                    str = str.replace(/đ/g, "d");
                    return str;
                }
            }
        }
        Validator('#update-vehicle')
    </script>
</body>

</html>
